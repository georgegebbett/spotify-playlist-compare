{"version":3,"sources":["components/LoginWithSpotify.js","views/login/Login.js","components/WebPlayback.jsx","views/playlistChoice/PlaylistChoice.js","components/PlaylistTable.js","views/comparison/Comparison.js","views/notFound/NotFound.js","views/callback/Callback.js","App.js","reportWebVitals.js","index.js"],"names":["LoginWithSpotify","React","useState","loginUrl","setLoginUrl","useEffect","fetch","then","res","json","data","url","className","onClick","window","location","icon","faSpotify","Login","props","currentEmoji","setCurrentEmoji","EMOJI_LIST","setInterval","emojiIndex","Math","floor","random","length","spotifyApi","WebPlayback","undefined","setPlayer","token","playbackEnabled","script","document","createElement","src","async","body","appendChild","onSpotifyWebPlaybackSDKReady","player","Spotify","Player","name","getOAuthToken","cb","volume","addListener","device_id","console","log","spotify_uri","playerInstance","_options","access_token","trackNo","method","JSON","stringify","context_uri","offset","position","headers","play","uri","connect","PlaylistChoice","playlists","setPlaylists","p1","p2","selectedPlaylists","setSelectedPlaylists","compareEnabled","setCompareEnabled","updateData","setUpdateData","navigate","useNavigate","updateToken","getAccessToken","localStorage","getItem","setAccessToken","getMe","userId","id","getUserPlaylists","playlistList","topSongRegExp","items","map","playlist","test","push","year","exec","getPlaylists","style","color","Form","onSubmit","event","preventDefault","onChange","target","value","Table","striped","hover","bordered","FormCheck","type","Button","variant","hidden","PlaylistTable","playlistData","size","colSpan","tracks","track","inOtherList","index","artist","Comparison","useSearchParams","searchParams","comparisonResult","setComparisonResult","loading","setLoading","confetti","JSConfetti","get","comparePlaylists","a","playlistResult","stats","sameSongs","playlist1","playlist2","getPlaylist","getPlaylistTracks","item","artists","track2","addConfetti","confettiRadius","confettiNumber","catch","e","NotFound","Callback","setToken","useLocation","regex","hash","match","setItem","SpotifyWebApi","require","App","redirectUri","process","SPOTIFY_REDIRECT_URI","clientId","SPOTIFY_CLIENT_ID","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.26ca5794.chunk.js","sourcesContent":["import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {faSpotify} from \"@fortawesome/free-brands-svg-icons\";\n\nimport React, {Fragment} from \"react\";\n\nimport \"./LoginWithSpotify.css\";\n\n\nexport default function LoginWithSpotify() {\n\n    const [loginUrl, setLoginUrl] = React.useState(\"\");\n\n    React.useEffect(() => {\n        fetch(\"/api/auth/getLoginUrl\")\n            .then((res) => res.json())\n            .then((data) => setLoginUrl(data.url));\n    }, []);\n\n    const handleClick = () => {\n        window.location = loginUrl;\n    }\n\n    return (\n        <Fragment>\n        <span className=\"spotifyButton\" onClick={handleClick}>\n            <FontAwesomeIcon icon={faSpotify}/>\n            {} Login with Spotify\n        </span>\n        </Fragment>\n    )\n}\n","import React, {useEffect, useState} from \"react\";\nimport LoginWithSpotify from \"../../components/LoginWithSpotify\";\n\nimport \"./login.css\";\n\nexport default function Login(props) {\n\n    const [currentEmoji, setCurrentEmoji] = useState(\"🎸\");\n    const EMOJI_LIST =  [\"🎼\", \"🪗\", \"🎸\", \"🎹\", \"🎺\", \"🎻\", \"🪕\", \"🥁\", \"🪘\", \"🎤\"]\n\n\n\n    useEffect(() => {\n\n        const changeEmoji = () => {\n            let emojiIndex = Math.floor(Math.random() * (EMOJI_LIST.length));\n            setCurrentEmoji(EMOJI_LIST[emojiIndex]);\n        }\n\n        setInterval(changeEmoji, 1500);\n\n    }, [])\n\n\n    return (\n        <div className=\"login-div\">\n            <header className=\"App-header\">\n                <h1 className=\"login-hero-emoji\">{currentEmoji}</h1>\n                <h1>How much did your taste <i>really</i> change between your Spotify Wrappeds? 🤔</h1>\n                <h3>Why don't we find out?</h3>\n                <br/>\n                <LoginWithSpotify spotifyApi={props.spotifyApi}/>\n            </header>\n        </div>\n    );\n}\n","import React, { useState, useEffect } from 'react';\n\nfunction WebPlayback(props) {\n\n    const [player, setPlayer] = useState(undefined);\n    const {token} = props;\n\n    const {playbackEnabled} = props;\n\n    useEffect(() => {\n\n        const script = document.createElement(\"script\");\n        script.src = \"https://sdk.scdn.co/spotify-player.js\";\n        script.async = true;\n\n        document.body.appendChild(script);\n\n        window.onSpotifyWebPlaybackSDKReady = () => {\n\n            const player = new window.Spotify.Player({\n                name: 'Wrapped Comparer',\n                getOAuthToken: cb => { cb(props.token); },\n                volume: 0.5\n            });\n\n            const play = ({\n                              spotify_uri,\n                              playerInstance: {\n                                  _options: {\n                                      getOAuthToken\n                                  }\n                              },\n                              device_id\n                          }) => {\n                getOAuthToken(access_token => {\n                    const trackNo = Math.floor(Math.random() * 100);\n                    fetch(`https://api.spotify.com/v1/me/player/play?device_id=${device_id}`, {\n                        method: 'PUT',\n                        body: JSON.stringify({\n                            context_uri: spotify_uri,\n                            offset: {\n                                position: trackNo\n                            }\n                        }),\n                        headers: {\n                            'Content-Type': 'application/json',\n                            'Authorization': `Bearer ${token}`\n                        },\n                    });\n                });\n            };\n\n            setPlayer(player);\n\n            player.addListener('ready', ({ device_id }) => {\n                console.log('Ready with Device ID', device_id);\n                if (playbackEnabled) {\n                    play({\n                        playerInstance: player,\n                        spotify_uri: props.uri,\n                        device_id: device_id\n                    });\n                }\n            });\n\n            player.addListener('not_ready', ({ device_id }) => {\n                console.log('Device ID has gone offline', device_id);\n            });\n\n\n            player.connect();\n\n        };\n    }, []);\n\n    return (\n        <>\n            <div className=\"container\">\n                <div className=\"main-wrapper\">\n\n                </div>\n            </div>\n        </>\n    );\n}\n\nexport default WebPlayback\n","import {Fragment, useEffect, useState} from \"react\";\nimport axios from 'axios';\nimport Table from \"react-bootstrap/Table\";\nimport {Button, Form, FormCheck} from \"react-bootstrap\";\nimport { useNavigate } from \"react-router-dom\";\nimport WebPlayback from \"../../components/WebPlayback\";\nimport \"./playlistChoice.css\";\n\n\nexport default function PlaylistChoice(props) {\n\n    const [playlists, setPlaylists] = useState(undefined);\n    const [selectedPlaylists, setSelectedPlaylists] = useState({p1: \"\", p2: \"\"});\n    const [compareEnabled, setCompareEnabled] = useState(false);\n\n    const [updateData, setUpdateData] = useState(false);\n\n    const [playbackEnabled] = useState(false);\n\n    let navigate = useNavigate();\n\n    useEffect(() => {\n        const getPlaylists = () => {\n            if (props.spotifyApi.getAccessToken() === undefined) {\n                updateToken();\n                setUpdateData(!updateData);\n                return;\n            }\n            props.spotifyApi.getMe()?.then(data => {\n                let userId = (data.body.id);\n                props.spotifyApi.getUserPlaylists(userId).then(data => {\n                    let playlistList = [];\n\n                    let topSongRegExp = /^Your Top Songs (\\d+)/;\n\n                    data.body.items.map(playlist => {\n                        if (topSongRegExp.test(playlist.name)) {\n                            playlistList.push({\n                                name: playlist.name,\n                                year: topSongRegExp.exec(playlist.name)[1],\n                                id: playlist.id,\n                                uri: playlist.uri\n                            });\n                        }\n                    })\n\n                    setPlaylists(playlistList);\n                })\n            });\n        }\n\n        const updateToken = () => {\n            if (props.spotifyApi.getAccessToken() === undefined) {\n                if (localStorage.getItem(\"SPOTIFY_TOKEN\") !== undefined) {\n                    props.spotifyApi.setAccessToken(localStorage.getItem(\"SPOTIFY_TOKEN\"));\n                }\n            }\n        }\n\n        getPlaylists();\n        updateToken();\n\n    }, [updateData]);\n\n    useEffect(() => {\n        if (selectedPlaylists.p1 === selectedPlaylists.p2 || selectedPlaylists.p1 === \"\" || selectedPlaylists.p2 === \"\") {\n            setCompareEnabled(false);\n        } else {\n            setCompareEnabled(true);\n        }\n    }, [selectedPlaylists])\n\n\n\n    const handleSubmit = (event) => {\n\n        event.preventDefault();\n        navigate(`/compare?p1=${selectedPlaylists.p1}&p2=${selectedPlaylists.p2}`);\n    }\n\n    const handleChange = (event) => {\n        setSelectedPlaylists({...selectedPlaylists, [event.target.name]: event.target.value})\n    }\n\n    return (\n        <Fragment>\n            {props.spotifyApi.getAccessToken() !== undefined && playlists !== undefined ? <WebPlayback token={props.spotifyApi.getAccessToken()} uri={playlists[0].uri} playbackEnabled={playbackEnabled}/> : null}\n            <div className=\"playlist-choice-div\">\n                <div className=\"title-div\">\n                    {playbackEnabled ? null : <h1 style={{color: \"#E63946\"}}>Playback disabled</h1>}\n                    <h1>Here are all your Top Songs playlists! Which two would you like to compare?</h1>\n                    <h3>If you expected to see more playlists here, make sure they are saved to your library!</h3>\n                </div>\n                <br/>\n                <Form onSubmit={handleSubmit} onChange={handleChange}>\n                    <Table striped hover bordered className=\"selection-table\">\n                        <thead>\n                            <tr>\n                                <td>Year</td>\n                                <td>Playlist</td>\n                                <td>Playlist 1</td>\n                                <td>Playlist 2</td>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                playlists ? playlists.map(playlist => {\n                                    return(\n                                        <tr key={playlist.id}>\n                                            <td>{playlist.year}</td>\n                                            <td>{playlist.name}</td>\n                                            <td><FormCheck type=\"radio\" name=\"p1\" value={playlist.id} /></td>\n                                            <td><FormCheck type=\"radio\" name=\"p2\" value={playlist.id} /></td>\n                                        </tr>\n                                    )\n                                }) : null\n                            }\n                        </tbody>\n                    </Table>\n                    <Button className=\"compare-button\" variant=\"success\" type=\"submit\" hidden={!compareEnabled}>Compare!</Button>\n                </Form>\n            </div>\n        </Fragment>\n    )\n\n\n}\n","import {Fragment} from \"react\";\nimport Table from \"react-bootstrap/Table\";\n\nexport function PlaylistTable(props) {\n    const {playlistData} = props;\n\n    return (\n        <Fragment>\n            <Table striped hover bordered size=\"sm\" className=\"playlist-table\">\n                <thead>\n                    <tr>\n                        <th colSpan=\"3\">{playlistData.name}</th>\n                    </tr>\n                    <tr>\n                        <th>#</th>\n                        <th>Track name</th>\n                        <th>Artist</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {\n                        playlistData ?\n                            playlistData.tracks.map(track => {\n                                return (\n                                    <tr key={track.id} className={track.inOtherList ? \"table-warning\" : null}>\n                                        <td>{track.index}</td>\n                                        <td>{track.name}</td>\n                                        <td>{track.artist}</td>\n                                    </tr>\n                                )\n                            })\n                            : null\n                    }\n                </tbody>\n            </Table>\n        </Fragment>\n    )\n\n}\n","import {useSearchParams} from \"react-router-dom\";\nimport {Fragment, useEffect, useState} from \"react\";\nimport {PlaylistTable} from \"../../components/PlaylistTable\";\nimport JSConfetti from \"js-confetti\";\nimport \"./comparison.css\";\nimport {Button} from \"react-bootstrap\";\nimport {useNavigate} from \"react-router-dom\";\n\nexport default function Comparison(props) {\n    const [searchParams] = useSearchParams();\n    const [selectedPlaylists, setSelectedPlaylists] = useState({});\n    const [comparisonResult, setComparisonResult] = useState(undefined);\n    const [loading, setLoading] = useState(true);\n\n    const {spotifyApi} = props;\n\n    const confetti = new JSConfetti();\n\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        setSelectedPlaylists({p1: searchParams.get(\"p1\"), p2: searchParams.get(\"p2\")});\n\n    }, [searchParams]);\n\n    useEffect(() => {\n        if (selectedPlaylists.p1 === undefined || selectedPlaylists.p2 === undefined) return;\n\n        const comparePlaylists = async () => {\n            let playlistResult = {stats: {sameSongs: 0}, playlist1: {name: \"\", tracks: []}, playlist2: {name: \"\", tracks: []}};\n\n            playlistResult.playlist1.name = (await spotifyApi.getPlaylist(selectedPlaylists.p1)).body.name;\n            playlistResult.playlist2.name = (await spotifyApi.getPlaylist(selectedPlaylists.p2)).body.name;\n\n            spotifyApi.getPlaylistTracks(selectedPlaylists.p1)\n                .then(data => {\n                    let index = 0;\n                    playlistResult.playlist1.tracks = data.body.items.map(item => {\n                        index++;\n                        return {\n                            index: index,\n                            id: item.track.id,\n                            name: item.track.name,\n                            artist: item.track.artists[0].name,\n                            inOtherList: false\n                        }\n                    })\n                    spotifyApi.getPlaylistTracks(selectedPlaylists.p2)\n                        .then(data => {\n                            let index = 0;\n                            playlistResult.playlist2.tracks = data.body.items.map(item => {\n                                index++;\n                                return {\n                                    index: index,\n                                    id: item.track.id,\n                                    name: item.track.name,\n                                    artist: item.track.artists[0].name,\n                                    inOtherList: false\n                                }\n                            })\n                            for (let track of playlistResult.playlist1.tracks) {\n                                for (let track2 of playlistResult.playlist2.tracks) {\n                                    if (track.id === track2.id) {\n                                        track.inOtherList = true;\n                                        track2.inOtherList = true;\n                                        playlistResult.stats.sameSongs++;\n                                    }\n                                }\n                            }\n\n                            setComparisonResult(playlistResult);\n                            setLoading(false);\n                            confetti.addConfetti({\n                                confettiRadius: 6,\n                                confettiNumber: 500,\n                            });\n                        })\n                        .catch(e => console.log(\"error\"));\n                })\n                .catch(e => console.log(\"error\"));\n        }\n\n        comparePlaylists();\n    }, [selectedPlaylists]);\n\n    const resetClickHandler = (event) => {\n      event.preventDefault();\n      navigate(\"/\");\n    }\n\n    return (\n        <div className=\"App\">\n            {loading ?\n                <Fragment>\n                    <h1>Loading!</h1>\n                </Fragment>\n                :\n                <Fragment>\n                    <h1>The results are in!</h1>\n                    <h2>{comparisonResult ? `${comparisonResult.stats.sameSongs} songs are on both of these lists` : null}</h2>\n                    <Button variant=\"primary\" onClick={resetClickHandler}>Back to the beginning!</Button>\n                    <div className=\"table-container\">\n                        <PlaylistTable playlistData={comparisonResult.playlist1}/>\n                        <PlaylistTable playlistData={comparisonResult.playlist2}/>\n                    </div>\n                </Fragment>\n            }\n        </div>\n    )\n}\n","import {Link, useNavigate} from \"react-router-dom\";\nimport \"../../App.css\";\nimport {Button} from \"react-bootstrap\";\n\n\nexport default function NotFound() {\n\n    let navigate = useNavigate();\n\n    const handleClick = (event) => {\n        event.preventDefault();\n        navigate(\"/\");\n    }\n\n    return (\n        <div className=\"App-header App error-page\">\n            <h1 className=\"error-hero\">🤔</h1>\n            <h2>What on earth are you up to</h2>\n            <Button variant=\"success\" onClick={handleClick}>Why don't you start again?</Button>\n        </div>\n    )\n}\n","import {useLocation, useNavigate} from \"react-router-dom\";\nimport {useEffect, useState} from \"react\";\n\nexport default function Callback(props) {\n    let navigate = useNavigate();\n    const [token, setToken] = useState(undefined);\n    let location = useLocation();\n    const regex = /access_token=(.*?)&/;\n\n    useEffect(() => {\n        setToken(location.hash.match(regex)[1]);\n    }, []);\n\n    useEffect(() => {\n        if (token !== undefined) {\n            props.spotifyApi.setAccessToken(token);\n            localStorage.setItem(\"SPOTIFY_TOKEN\", token);\n            navigate('/playlistChoice');\n        }\n    }, [token])\n\n    return null;\n}\n","// import './App.css';\nimport React from \"react\";\nimport {\n    BrowserRouter as Router,\n    Routes,\n    Route\n} from \"react-router-dom\";\n\nimport Login from \"./views/login/Login\";\n\nimport PlaylistChoice from \"./views/playlistChoice/PlaylistChoice\";\nimport Comparison from \"./views/comparison/Comparison\";\nimport NotFound from \"./views/notFound/NotFound\";\nimport Callback from \"./views/callback/Callback\";\nconst SpotifyWebApi = require(\"spotify-web-api-node\");\n\nfunction App() {\n\n    const spotifyApi = new SpotifyWebApi({\n        redirectUri: process.env.SPOTIFY_REDIRECT_URI,\n        clientId: process.env.SPOTIFY_CLIENT_ID\n    });\n\n    return (\n        <Router>\n            <Routes>\n                <Route path=\"/\" element={<Login spotifyApi={spotifyApi}/>}/>\n                <Route path=\"/loginCallback\" element={<Callback spotifyApi={spotifyApi}/>}/>\n                <Route path=\"/playlistChoice\" element={<PlaylistChoice spotifyApi={spotifyApi}/>}/>\n                <Route path=\"/compare\" element={<Comparison spotifyApi={spotifyApi}/>}/>\n                <Route path=\"*\" element={<NotFound/>}/>\n            </Routes>\n        </Router>\n    )\n\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}